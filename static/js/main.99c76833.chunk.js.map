{"version":3,"sources":["Store/questionsReducer.js","Components/Start.js","Components/Question.js","Components/Results.js","App.js","Store/gameStatsReducer.js","Store/index.js","reportWebVitals.js","index.js"],"names":["GET_QUESTIONS","pickQuestions","dispatch","chosen","counter","index","Math","floor","random","QandA","length","push","console","log","type","questions","Start","state","nameInput","disabled","inputVal","React","createRef","toggleButton","bind","input","this","current","value","btnState","setState","className","htmlFor","name","placeholder","ref","onChange","Component","connect","fetchQuestions","Question","Results","App","gamePhase","props","gameStats","id","ACTIVATE_GAME","CHANGE_PHASE","reducer","combineReducers","QNum","CurQ","Questions","action","score","playerName","newName","phase","middleware","composeWithDevTools","applyMiddleware","thunkMiddleware","createLogger","collapsed","store","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99c76833.chunk.js","sourcesContent":["import QandA from \"../Apprentice_TandemFor400_Data.json\"\n\n//Action\nconst GET_QUESTIONS = \"GET_QUESTIONS\";\n\n//ACTION CREATOR\nconst getQuestions = (questions) => {\n  return {\n    type: GET_QUESTIONS,\n    questions\n  }\n}\n\nexport const pickQuestions = () => {\n  return (dispatch) => {\n    let chosen = [];\n    let counter = 0;\n    while(counter<10){\n      let index = Math.floor(Math.random()*(QandA.length))\n      chosen.push(QandA[index]);\n      counter++;\n    }\n    console.log(\"CHOSEN\",chosen);\n    dispatch(getQuestions(chosen));\n  }\n}\n\n/*State = {\n  QNum: 0,\n  CurQ: {},\n  Questions: [],\n}\n*/\n//Reducer\nexport default function questionsReducer(state={QNum: 0, CurQ: {}, Questions: []}, action){\n  switch(action.type){\n    case GET_QUESTIONS:\n      return {...state, Questions: action.questions}\n    default:\n      return state;\n  }\n}\n","import { render } from \"@testing-library/react\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {pickQuestions} from \"../Store/questionsReducer\"\n\nclass Start extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      nameInput: \"\",\n      disabled: true,\n    }\n    this.inputVal = React.createRef();\n    this.toggleButton = this.toggleButton.bind(this);\n  }\n\n  toggleButton(){\n    let input = this.inputVal.current.value;\n    let btnState = input.length? false: true;\n    this.setState({nameInput: this.inputVal, disabled: btnState})\n    console.log(\"input\", input, \"button state\", btnState);\n  }\n\n  render(){\n  return(\n    <div className=\"start\">\n      <div>Welcome to Trivi-I-Know</div>\n      <div>Score board would go here</div>\n      <div className=\"playerInput\">\n      <label htmlFor=\"name\">Player Name: </label>\n      <input name=\"name\" type=\"text\" placeholder=\"Please enter your name\" ref={this.inputVal} onChange={this.toggleButton}/>\n      <button type=\"button\" disabled={this.state.disabled}>Start Game</button>\n      </div>\n     </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchQuestions: () => dispatch(pickQuestions())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Start);\n","import React from \"react\";\n\nfunction Question(){\n  return(\n    <div className=\"question\">\n      <div className=\"topBanner\">\n      <div>Question #/10</div>\n      <div className=\"navQuestions\">\n        <button>Previous</button>\n        <button>Next</button>\n        </div></div>\n      <form className=\"playerInput\">\n        <h3>Here's your question?</h3>\n        <div className=\"answer\">\n          <input name=\"answer\" type=\"radio\" placeholder=\"Create map function to display question's 4 answers\"/>\n          <label htmlFor=\"A1\">Answer 1</label>\n        </div>\n        <div className=\"answer\">\n          <input name=\"answer\" type=\"radio\" placeholder=\"Create map function to display question's 4 answers\"/>\n          <label htmlFor=\"A1\">Answer 2</label>\n        </div>\n        <div className=\"answer\">\n          <input name=\"answer\" type=\"radio\" placeholder=\"Create map function to display question's 4 answers\"/>\n          <label htmlFor=\"A1\">Answer 3</label>\n        </div>\n        <div className=\"answer\">\n          <input name=\"answer\" type=\"radio\" placeholder=\"Create map function to display question's 4 answers\"/>\n          <label htmlFor=\"A1\">Answer 4</label>\n        </div>\n          <button type=\"submit\">Submit</button>\n      </form>\n\n\n    </div>\n  )\n}\n\nexport default Question;\n","import React from \"react\";\n\nfunction Results() {\n  return(\n    <div className=\"results\">\n      <h2>Congratulations [player name]!</h2>\n      <h3>Your score is: x/10</h3>\n\n      <div className=\"resultBtns\">\n        <button>Return to Start</button>\n        <button>Restart game</button>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Results;\n","import './App.css';\nimport React from \"react\";\nimport Start from \"./Components/Start\";\nimport Question from \"./Components/Question\";\nimport Results from \"./Components/Results\";\nimport {connect} from \"react-redux\";\n\nclass App extends React.Component {\n  render(){\n    let {gamePhase} = this.props ? this.props.gameStats: null;\n\n    if(!gamePhase){\n      return(\n        <div className=\"App\">\n        <h2>Loading...</h2>\n      </div>\n    )\n  }\n  else{\n    console.log(\"Current game phase: \", gamePhase);\n    return (\n      <div className=\"App\">\n      <h1 id=\"gameName\">Trivi-I-Know</h1>\n      {gamePhase===\"start\"? (<Start/>):(gamePhase===\"questions\"?(<Question/>):(<Results/>))}\n      </div>\n      );\n    }\n  }\n}\n\nconst mapStatetoProps = (state) => {\n  return{\n    questions: state.questions,\n    gameStats: state.gameStats,\n  }\n}\n\nexport default connect(mapStatetoProps)(App);\n","//Game statistics\n\n//Actions\nconst ACTIVATE_GAME = \"ACTIVATE_GAME\";\nconst CHANGE_PHASE = \"CHANGE_PHASE\";\n\n//Action Creator\nconst startGame = (name) => {\n  return {\n    type: ACTIVATE_GAME,\n    name\n  }\n}\n\nconst changePhase = (phase) => {\n  return {\n    type: CHANGE_PHASE,\n    phase\n  }\n}\n\n\n\n//Thunk Creator\nexport const activateGame = (name) => {\n  return (dispatch) => {\n    dispatch(startGame(name))\n  }\n}\n\nexport const nextPhase = (phase) => {\n  return (dispatch) => {\n    dispatch(changePhase(phase))\n  }\n}\n\n/*\nState = {\n  score: 0,\n  playerName: \"\",\n  gamePhase: start|questions|results,\n}\n*/\n\n\nexport default function gameStatsReducer(state = {score:0, playerName:\"\", gamePhase: \"start\"}, action){\n  switch(action.type){\n    case ACTIVATE_GAME:\n      let newName = action.name ? action.name : state.name;\n      return {score:0, phase: \"questions\", name: newName}\n    case CHANGE_PHASE:\n      return {...state, gamePhase: action.phase};\n    default:\n      return state;\n  }\n}\n","//Store\nimport {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport questions from \"./questionsReducer\"\nimport gameStats from \"./gameStatsReducer\"\n\nconst reducer = combineReducers({\n  questions,\n  gameStats,\n});\n\nconst middleware = composeWithDevTools(\n  applyMiddleware(thunkMiddleware, createLogger({collapsed: true}))\n)\n\nconst store = createStore(reducer, middleware);\nexport default store;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport store from \"./Store\"\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}