{"version":3,"sources":["Store/questionsReducer.js","Store/gameStatsReducer.js","Components/Start.js","Components/Question.js","Components/Results.js","App.js","Store/index.js","reportWebVitals.js","index.js"],"names":["initialState","QNum","QIdx","CurQ","Questions","GET_QUESTIONS","GENERATE_QUESTION","generateQuestion","question","type","pickQuestions","dispatch","questions","chosen","Set","counter","index","Math","floor","random","QandA","length","has","add","ACTIVATE_GAME","CHANGE_PHASE","activateGame","name","startGame","Start","state","nameInput","disabled","inputVal","React","createRef","toggleButton","bind","btnState","this","current","value","trim","setState","props","fetchQuestions","beginGame","error","console","log","className","htmlFor","placeholder","ref","onChange","onClick","Component","connect","Question","getQ","curQuestion","answers","gameStats","map","ans","idx","num","qNum","correct","incorrect","inserts","size","ansArr","forEach","push","formatQuestion","Results","App","phase","id","reducer","combineReducers","action","score","playerName","newName","middleware","composeWithDevTools","applyMiddleware","thunkMiddleware","createLogger","collapsed","store","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.020df6e1.chunk.js","sourcesContent":["import QandA from \"../Apprentice_TandemFor400_Data.json\"\n//Initial State\nconst initialState = {\n  QNum: 0,\n  QIdx: 0,\n  CurQ: {},\n  Questions: [],\n}\n\n//Action\nconst GET_QUESTIONS = \"GET_QUESTIONS\";\nconst GENERATE_QUESTION = \"GENERATE_QUESTION\";\n\n//ACTION CREATOR\nconst getQuestions = (questions) => {\n  return {\n    type: GET_QUESTIONS,\n    questions\n  }\n}\n\nconst generateQuestion = (question) => {\n  return {\n    type: GENERATE_QUESTION,\n    question\n  }\n}\n\nexport const pickQuestions = () => {\n  return (dispatch) => {\n    let chosen = new Set();\n    let counter = 0;\n    while(counter<10){\n      let index = Math.floor(Math.random()*(QandA.length));\n      if(!chosen.has(index)){\n        chosen.add(index);\n        counter++;\n      }\n    }\n    dispatch(getQuestions([...chosen]));\n  }\n}\n//Input will be INDEX in QandA to look for\nexport const formatQuestion = (qNum=0) => {\n  return (dispatch) => {\n    try{\n      let {question, correct, incorrect} = QandA[qNum];\n      let inserts = new Set();\n      let answers = [correct, ...incorrect];\n\n      //Randomize order of possible answers\n      while(inserts.size<4){ //creates order of indexes\n        let idx = Math.floor(Math.random()*(4))\n        inserts.add(idx);\n      }\n      let ansArr = [];\n      inserts.forEach(idx=> {\n        ansArr.push(answers[idx])\n      })\n      dispatch(generateQuestion({question, answers: ansArr}))\n    } catch(error){\n        console.log(\"Error formatting questions\", error);\n    }\n  }\n}\n/*{\n  queston: q,\n  answers: [in randomized order]\n\n}*/\n\n\n//Reducer\nexport default function questionsReducer(state=initialState, action){\n  switch(action.type){\n    case GET_QUESTIONS:\n      return {...state, Questions: action.questions, QIdx: action.questions[0]}\n    case GENERATE_QUESTION:\n      return {...state, CurQ: action.question}\n    default:\n      return state;\n  }\n}\n","//Game statistics\n\n//Actions\nconst ACTIVATE_GAME = \"ACTIVATE_GAME\";\nconst CHANGE_PHASE = \"CHANGE_PHASE\";\n\n//Action Creator\nconst startGame = (name) => {\n  return {\n    type: ACTIVATE_GAME,\n    name\n  }\n}\n\nconst changePhase = (phase) => {\n  return {\n    type: CHANGE_PHASE,\n    phase\n  }\n}\n\n\n\n//Thunk Creator\nexport const activateGame = (name) => {\n  return (dispatch) => {\n    dispatch(startGame(name))\n  }\n}\n\nexport const nextPhase = (phase) => {\n  return (dispatch) => {\n    dispatch(changePhase(phase))\n  }\n}\n\n/*\nState = {\n  score: 0,\n  playerName: \"\",\n  gamePhase: start|questions|results,\n}\n*/\n\n\nexport default function gameStatsReducer(state = {score:0, playerName:\"\", phase: \"start\"}, action){\n  switch(action.type){\n    case ACTIVATE_GAME:\n      let newName = action.name ? action.name : state.name;\n      return {score:0, phase: \"questions\", name: newName}\n    case CHANGE_PHASE:\n      return {...state, phase: action.phase};\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {pickQuestions} from \"../Store/questionsReducer\";\nimport {activateGame} from \"../Store/gameStatsReducer\";\n\nclass Start extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      nameInput: \"\",\n      disabled: true,\n    }\n    this.inputVal = React.createRef();\n    this.toggleButton = this.toggleButton.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n  //Note for later: may not need to put nameInput in state\n  toggleButton(){\n    let input = this.inputVal.current.value;\n    let btnState = input.trim().length? false: true;\n    this.setState({nameInput: this.inputVal, disabled: btnState})\n  }\n  startGame(){\n    try{\n      this.props.fetchQuestions();\n      this.props.beginGame(this.inputVal.current.value);\n\n    }catch(error){\n      console.log(\"Error starting game:\", error)\n    }\n  }\n\n  render(){\n  return(\n    <div className=\"start\">\n      <div>Welcome to Trivi-I-Know</div>\n      <div>Score board would go here</div>\n      <div className=\"playerInput\">\n      <label htmlFor=\"name\">Player Name: </label>\n      <input name=\"name\" type=\"text\" placeholder=\"Please enter your name\" ref={this.inputVal} onChange={this.toggleButton}/>\n      <button type=\"button\" disabled={this.state.disabled} onClick={this.startGame}>Start Game</button>\n      </div>\n     </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchQuestions: () => dispatch(pickQuestions()),\n    beginGame: (name) => dispatch(activateGame(name))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Start);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {formatQuestion} from \"../Store/questionsReducer\";\n\nclass Question extends React.Component{\n async componentDidMount(){\n   try{\n     await this.props.getQ(this.props.QIdx)\n   } catch(error){\n     console.log(\"Error getting question\", error)\n   }\n  }\n  render(){\n    console.log(\"PROPS\",this.props)\n    if(!this.props.curQuestion){\n      return(\n        <div className=\"question\">\n        <h2 className=\"loading\">Loading...</h2>\n      </div>\n      )\n    }\n    let {question, answers} = this.props.curQuestion;\n  return(\n    <div className=\"question\">\n      <div className=\"topBanner\">\n        <div>Question {this.props.QNum+1}/10</div>\n        <div>{this.props.gameStats.name||\"\"}</div>\n        <div className=\"navQuestions\">\n          <button>Previous</button>\n          <button>Next</button>\n        </div>\n      </div>\n\n      <form className=\"playerInput\">\n        <h3 className=\"questionHeader\">{question||\"Question\"}</h3>\n        <div className=\"mappedAnswers\">\n          {this.props.curQuestion.answers?(\n            answers.map((ans, idx)=> {\n            return(\n                <div className=\"answer\" key={`ans_${idx}`}>\n                  <input name=\"answer\" type=\"radio\" placeholder=\"Create map function to display question's 4 answers\"/>\n                  <label htmlFor=\"A1\">{ans}</label>\n                </div>\n            )\n          }))\n          :(<div className=\"answer\">Loading</div>)}\n          </div>\n          <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  )\n  }\n}\n\nconst mapStateToState = (state) => {\n  return {\n    curQuestion: state.questions.CurQ,\n    QNum: state.questions.QNum,\n    QIdx: state.questions.QIdx,\n    gameStats: state.gameStats\n\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getQ: (num) => dispatch(formatQuestion(num))\n  }\n}\n\nexport default connect(mapStateToState, mapDispatchToProps)(Question);\n","import React from \"react\";\n\nfunction Results() {\n  return(\n    <div className=\"results\">\n      <h2>Congratulations [player name]!</h2>\n      <h3>Your score is: x/10</h3>\n\n      <div className=\"resultBtns\">\n        <button>Return to Start</button>\n        <button>Restart game</button>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Results;\n","import './App.css';\nimport React from \"react\";\nimport Start from \"./Components/Start\";\nimport Question from \"./Components/Question\";\nimport Results from \"./Components/Results\";\nimport {connect} from \"react-redux\";\n\nclass App extends React.Component {\n  render(){\n    let {phase} = this.props ? this.props.gameStats: null;\n\n    if(!this.props.gameStats.phase){\n      return(\n        <div className=\"App\">\n        <h2 className=\"loading\">Loading...</h2>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div className=\"App\">\n      <h1 id=\"gameName\">Trivi-I-Know</h1>\n      {phase===\"start\"? (<Start/>):(phase===\"questions\"?(<Question/>):(<Results/>))}\n      </div>\n      );\n    }\n  }\n}\n\nconst mapStatetoProps = (state) => {\n  return{\n    questions: state.questions,\n    gameStats: state.gameStats,\n  }\n}\n\nexport default connect(mapStatetoProps)(App);\n","//Store\nimport {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport questions from \"./questionsReducer\"\nimport gameStats from \"./gameStatsReducer\"\n\nconst reducer = combineReducers({\n  questions,\n  gameStats,\n});\n\nconst middleware = composeWithDevTools(\n  applyMiddleware(thunkMiddleware, createLogger({collapsed: true}))\n)\n\nconst store = createStore(reducer, middleware);\nexport default store;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport store from \"./Store\"\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}